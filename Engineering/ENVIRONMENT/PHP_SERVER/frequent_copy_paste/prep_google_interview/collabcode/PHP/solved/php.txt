1/ Give an example when you will use a linked list over an array.  

I'll probably never use a linked list with PHP. In PHP arrays can do what the a linked list does and more. Historically the linked list is used for when the memory usage is not known at run time. The operations are then associated with dynamic memory allocation. With PHP the size of the array doesn't need to be declared and the memory allocation are done transparently. The only thing that I can think is if I am not happy with the memory usage because of a high data volume or low speed. Yet I will not pay the price of being inconsistant and prefer to fix the architecture of the program and still use arrays.

2/ In the following PHP code, explain what the function is trying to do.  What is wrong with it?  How will you fix it?
 
function foo($j) {
  $ids = array();
  while (count($ids) < $j) {
    $id = gen_id();  // assume this function will return you an integer
    if (!in_array($id, $ids)) {
      $ids[] = $id;
    }
  }
  return $ids;
}

This function creates an array with a size of $j populated. The content of the array are ids generated by gen_id() and all ids must be different.
The problem I see is if gen_id() does not generate enough variety of ids so it loops indefinitely. For example if 
$id = gen_id();
is replaced with
$id = rand(1,$j-1); it will show the issue because the spectrum of rand(1,$j-1) is not spread enough to populate all the array locations.
A fix could be to use $id = rand(1,$j); instead of gen_id(). 
 
3/ Given a sorted array of integers, write a function that will return a boolean to indicate if there exists two numbers in the array that would sum to zero.  There are multiple solutions to this — describe the fastest one you can think of and tell us the run time and memory requirement in big O notation.
 
Here my proposal:
<?php
$tab=array(-10,-7,-1,3,7,9,11);

function sumtozero($tb) {
  $pivot=intval(count($tb)/2);
  $head=0;
  $tail=count($tb)-1;

  do {
  if(($tb[$head]+$tb[$tail])==0) 
    return true;
  while(($tb[$head]+$tb[$tail])>0)
    $tail--;
  while(($tb[$head]+$tb[$tail])<0)
    $head++;
  } while($head<=$tail);
  return false;
}
sumtozero($tab);
?> 
It's complexity is O(n) when n is the size of the array. It occupies n+3 memory cells.
 
4/ Create part of HTML page that contains a picture.  When the user hovers over the picture, an icon (ie. a small gif) should show in the bottom right corner of the picture.  The solution should work regardless of the size of the picture, assuming the icon is smaller than the given picture. (ie. if the picture sizes change, you should not need to change your code)
 
See here: http://siliconkit.com/hoverimg/

or see below:

<!DOCTYPE html>
<html>
<head>
<style type"text/css">
.icon {
  position: relative;
  left: -178px;
}
</style>

<script type="text/javascript">
function showicon(elem) {
iconimg=elem.parentNode.getElementsByTagName("img")[1];
iconimg.style.display="";
}

function hideicon(elem) {
iconimg=elem.parentNode.getElementsByTagName("img")[1];
iconimg.style.display="none";
}
</script>
</head>
<body>
</body>
<div>
<img src="hps.jpg" onmouseover="showicon(this)" onmouseout="hideicon(this)" />
<img src="browser.gif" class="icon" />
</div>

<div>
<img src="hpl.jpg" onmouseover="showicon(this)" onmouseout="hideicon(this)" />
<img src="browser.gif" class="icon" />
</div>
</html>
